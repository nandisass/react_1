{"version":3,"sources":["Nandi.js","App.js","serviceWorker.js","index.js"],"names":["Nandi","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","options","value","label","useState","selectedOption","setSelectedOption","lnk","setLnk","showMap","Map","center","zoom","style","height","zoomControl","TileLayer","url","attribution","ImageOverlay","bounds","opacity","filter","option","onChange","e","console","log","autoFocus","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qQAiGeA,EAvFD,kBAELC,IAAEC,KAAKC,QAAQC,UAAUC,YAEhCJ,IAAEC,KAAKC,QAAQG,aAAa,CACxBC,cAAeC,EAAQ,IACvBC,QAASD,EAAQ,IACjBE,UAAWF,EAAQ,MAGvB,IAAMG,EAAU,CACd,CAAEC,MAAO,oFAAqFC,MAAO,SACrG,CAAED,MAAO,kFAAmFC,MAAO,QAZnF,EAgB4BC,mBAAS,MAhBrC,mBAgBTC,EAhBS,KAgBOC,EAhBP,OAiBMF,mBAAS,IAjBf,mBAiBTG,EAjBS,KAiBJC,EAjBI,OAkBEJ,oBAAS,GAApBK,EAlBS,oBAiChB,OACE,6BACA,kBAACC,EAAA,EAAD,CACAC,OAAQ,CAAC,GAAM,MACfC,KAAM,EACNC,MAAO,CAACC,OAAQ,SAChBC,aAAa,GAIb,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,KAEXT,EACC,kBAACU,EAAA,EAAD,CACEC,OAAQ,CACN,CAAC,KAAO,MACR,CAAC,MAAO,QAEVC,QAAU,EACVJ,IAAKV,IAEL,MAYJ,6BACE,0CACA,kBAAC,IAAD,CAEEL,MAASD,EAAQqB,QAAO,SAASC,GACzB,OAAOA,EAAOrB,QAAUG,KAGhCmB,SAxDa,SAACC,GACpBnB,EAAkBmB,EAAEvB,OACpBM,EAAOiB,EAAEvB,OACTwB,QAAQC,IAAR,mBAAgCF,EAAEvB,QAsD5BD,QAASA,EACT2B,WAAW,EACXC,YAAY,qBAEd,sDAA4BxB,EAA5B,QC7EKyB,MAXf,WACE,OACE,6BACA,kBAAC,EAAD,MACE,gCCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.336210ff.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Map, TileLayer } from \"react-leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport Select from 'react-select';\nimport {\n  ImageOverlay,\n} from \"react-leaflet\";\n\n\nconst Nandi = () => {\n\n  delete L.Icon.Default.prototype._getIconUrl;\n\n  L.Icon.Default.mergeOptions({\n      iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n      iconUrl: require('leaflet/dist/images/marker-icon.png'),\n      shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n  });\n\n  const options = [\n    { value: 'https://raw.githubusercontent.com/nandisass/react_data/master/test/data/black.png', label: 'Black' },\n    { value: 'https://raw.githubusercontent.com/nandisass/react_data/master/test/data/red.png', label: 'Red' },\n  ];\n\n\n    const [selectedOption, setSelectedOption] = useState(null)\n    const [lnk, setLnk] = useState('')\n    const [showMap] = useState(true)\n\n    const handleChange = (e) => {\n      setSelectedOption(e.value);\n      setLnk(e.value);\n      console.log(`Option selected:`, e.value);\n    }\n\n    // const groupStyles = {\n    //   display: 'flex',\n    //   alignItems: 'center',\n    //   justifyContent: 'space-between',\n    // };\n\n\n    return (\n      <div>\n      <Map\n      center={[20.0, 79.9]}\n      zoom={4}\n      style={{height: '450px'}}\n      zoomControl={true}\n\n      >\n\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution=''\n      />\n        {showMap ? (\n          <ImageOverlay\n            bounds={[\n              [5.99 , 67.40],\n              [37.98, 97.67],\n            ]}\n            opacity= {1}\n            url={lnk}\n          />\n        ) : null}\n\n      {/* <ImageOverlay\n        bounds={[\n          [5.99 , 67.40],\n          [37.98, 97.67],\n        ]}\n        opacity= {1}\n        url=\"https://i.ibb.co/fM78wJr/pngwing.png\"\n      /> */}\n\n      </Map>\n        <div>\n          <h1>This is it</h1>\n          <Select\n            // value={selectedOption}\n            value = {options.filter(function(option) {\n                    return option.value === selectedOption;\n                    })}\n            // onChange={(selectedOption)=>handleChange(selectedOption)}\n            onChange={handleChange}\n            options={options}\n            autoFocus={true}\n            placeholder=\"Select Map Color\"\n          />\n          <h2>The selected option is {selectedOption} </h2>\n        </div>\n      </div>\n      )\n}\n\nexport default Nandi;","import React from 'react'\nimport Nandi from './Nandi'\n\nfunction App() {\n  return (\n    <div>\n    <Nandi />\n      <div>\n        {/* <h1>This is Saswata</h1> */}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}